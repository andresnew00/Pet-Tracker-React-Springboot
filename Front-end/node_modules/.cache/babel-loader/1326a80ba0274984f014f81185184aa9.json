{"ast":null,"code":"var _jsxFileName = \"/Users/andresnew00/Desktop/Projects/Pet-Tracker-React-Springboot/src/main/java/com/company/Pettracker/app/src/components/CreateModal.js\";\nimport React, { useState } from \"react\";\nimport { Form, Button, Row, Col, Alert } from \"react-bootstrap\";\nimport axios from \"axios\";\nexport default function CreateModal(props) {\n  const [newClient, setNewClient] = useState({\n    petName: \"\",\n    clientName: \"\",\n    phoneNumber: \"\",\n    behavior: \"\",\n    banned: false\n  });\n  const [errors, setErrors] = useState({\n    petNameError: \"\",\n    clientNameError: \"\",\n    phoneNumberError: \"\",\n    behaviorError: \"\"\n  });\n\n  const validateForm = () => {\n    let petNameError = \"\";\n    let clientNameError = \"\";\n    let phoneNumberError = \"\";\n    let behaviorError = \"\";\n\n    if (!newClient.petName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      petNameError = \"Pet name should only contain valid characters.\";\n    }\n\n    if (newClient.petName.length > 15) {\n      petNameError = \"Pet's name can not be longer than 15 characters\";\n    }\n\n    if (newClient.clientName.length < 2 || newClient.clientName.length > 30) {\n      clientNameError = \"Name should be more than 2 characters and less than 30\";\n    }\n\n    if (!newClient.clientName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      clientNameError = \"Client name should only include letters\";\n    }\n\n    if (!newClient.phoneNumber.match(/^((\\d{3})\\s)?(\\d{7})$/)) {\n      phoneNumberError = \"format should be area code, space then 7 digits ex. 000 0000000\";\n    }\n\n    if (!newClient.behavior.match(/^[a-zA-Z]+$/)) {\n      behaviorError = \"this field should only contain letters and no spaces\";\n    }\n\n    if (petNameError || clientNameError || phoneNumberError || behaviorError) {\n      setErrors({\n        petNameError: petNameError,\n        clientNameError: clientNameError,\n        phoneNumberError: phoneNumberError,\n        behaviorError: behaviorError\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const formIsValid = validateForm();\n\n    if (formIsValid) {\n      axios.post(\"http://localhost:8080/pet/newPet\", newClient).then(res => {\n        console.log(res); //update list after adding new element\n\n        props.setUpdateList(!props.updateList);\n        props.setShow;\n      }).catch(error => {\n        console.log(error.response.data.message);\n      }); //clear form\n      // this.setState(initialState);\n      //update client list\n      // props.getAllClients();\n      //alert popup\n      // this.setState({ show: true });\n    }\n  };\n\n  const handleInputChange = event => {\n    event.preventDefault();\n    const {\n      name,\n      value\n    } = event.target;\n    setNewClient(prevState => ({ ...prevState,\n      [name]: value\n    }));\n    console.log(newClient);\n  };\n\n  const handleInputBooleanChange = event => {\n    event.preventDefault();\n    const {\n      name,\n      value\n    } = event.target;\n    setNewClient({\n      [name]: value === \"true\"\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CreateModal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topBar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"Create New Patient\")), /*#__PURE__*/React.createElement(Col, {\n    className: \"closeButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: props.toggleCreateModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-close fa-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    noValidate: true,\n    className: \"form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }, \"Pet Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    name: \"petName\",\n    value: newClient.petName,\n    placeholder: \"Pet Name\",\n    onChange: handleInputChange,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }\n  }, errors.petNameError)), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }\n  }, \"Client Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    name: \"clientName\",\n    placeholder: \"Client Name\",\n    value: newClient.clientName,\n    onChange: handleInputChange,\n    autocomplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 19\n    }\n  }, errors.clientNameError)), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 19\n    }\n  }, \"Phone Number\"), /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    name: \"phoneNumber\",\n    placeholder: \"Phone Number\",\n    value: newClient.phoneNumber,\n    onChange: handleInputChange,\n    autocomplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 19\n    }\n  }, errors.phoneNumberError), /*#__PURE__*/React.createElement(Form.Text, {\n    className: \"text-muted\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"Please add phone number in the following format 555 1117777\")), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 19\n    }\n  }, \"Pet Behavior\"), /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    name: \"behavior\",\n    placeholder: \"Pet Behavior\",\n    value: newClient.behavior,\n    onChange: handleInputChange,\n    autocomplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }\n  }, errors.behaviorError))), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }, \"Fired Client?\"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"select\",\n    name: \"banned\",\n    onChange: handleInputBooleanChange,\n    autocomplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  }, \"No\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 21\n    }\n  }, \"Yes\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttonbottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    \"justify-content-end\": true,\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, \"Create\"))))));\n} // const initialState = {\n//   petName: \"\",\n//   clientName: \"\",\n//   phoneNumber: \"\",\n//   behavior: \"\",\n//   banned: false,\n//   petNameError: \"\",\n//   clientNameError: \"\",\n//   phoneNumberError: \"\",\n//   behaviorError: \"\",\n//   show: false,\n// };\n// export default class CreateModal extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = initialState;\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.handleInputChange = this.handleInputChange.bind(this);\n//   }\n//   validateForm = () => {\n//     let petNameError = \"\";\n//     let clientNameError = \"\";\n//     let phoneNumberError = \"\";\n//     let behaviorError = \"\";\n//     if (!this.state.petName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n//       petNameError = \"Pet name should only contain valid characters.\";\n//     }\n//     if (this.state.petName.length > 15) {\n//       petNameError = \"Pet's name can not be longer than 15 characters\";\n//     }\n//     if (this.state.clientName.length < 2 || this.state.clientName.length > 30) {\n//       clientNameError =\n//         \"Name should be more than 2 characters and less than 30\";\n//     }\n//     if (!this.state.clientName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n//       clientNameError = \"Client name should only include letters\";\n//     }\n//     if (!this.state.phoneNumber.match(/^((\\d{3})\\s)?(\\d{7})$/)) {\n//       phoneNumberError =\n//         \"format should be area code, space then 7 digits ex. 000 0000000\";\n//     }\n//     if (!this.state.behavior.match(/^[a-zA-Z]+$/)) {\n//       behaviorError = \"this field should only contain letters and no spaces\";\n//     }\n//     if (petNameError || clientNameError || phoneNumberError || behaviorError) {\n//       this.setState({\n//         petNameError,\n//         clientNameError,\n//         phoneNumberError,\n//         behaviorError,\n//       });\n//       return false;\n//     }\n//     return true;\n//   };\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const isValid = this.validateForm();\n//     if (isValid) {\n//       const clientInfo = {\n//         petName: this.state.petName,\n//         clientName: this.state.clientName,\n//         phoneNumber: this.state.phoneNumber,\n//         behavior: this.state.behavior,\n//         banned: this.state.banned,\n//       };\n//       console.log(clientInfo);\n//       axios\n//         .post(\"http://localhost:8080/pet/newPet\", clientInfo)\n//         .then((res) => console.log(res))\n//         .catch((error) => {\n//           console.log(error.response.data.message);\n//         });\n//       //clear form\n//       this.setState(initialState);\n//       //update client list\n//       this.props.getAllClients();\n//       //alert popup\n//       this.setState({ show: true });\n//     }\n//   };\n//   handleInputChange = (event) => {\n//     event.preventDefault();\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//     });\n//   };\n//   handleInputBooleanChange = (event) => {\n//     event.preventDefault();\n//     this.setState({\n//       [event.target.name]: event.target.value === \"true\",\n//     });\n//   };\n//   render() {\n//     const {\n//       petName,\n//       clientName,\n//       phoneNumber,\n//       behavior,\n//       validated,\n//     } = this.state;\n//     return (\n//       <div className=\"CreateModal\">\n//         <section>\n//           <div className=\"topBar\">\n//             <Row>\n//               <Col>\n//                 <h2>Create New Patient</h2>\n//               </Col>\n//               <Col className=\"closeButton\">\n//                 <Button onClick={this.props.toggleCreateModal}>\n//                   <i className=\"fa fa-close fa-lg\"></i>\n//                 </Button>\n//               </Col>\n//             </Row>\n//           </div>\n//           <div className=\"modalContent\">\n//             <Form\n//               noValidate\n//               validated={validated}\n//               className=\"form\"\n//               onSubmit={this.handleSubmit}\n//             >\n//               <Row>\n//                 <Col>\n//                   <Form.Group>\n//                     <Form.Label>Pet Name</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"petName\"\n//                       value={petName}\n//                       placeholder=\"Pet Name\"\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.petNameError}\n//                     </div>\n//                   </Form.Group>\n//                   <Form.Group>\n//                     <Form.Label>Client Name</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"clientName\"\n//                       placeholder=\"Client Name\"\n//                       value={clientName}\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.clientNameError}\n//                     </div>\n//                   </Form.Group>\n//                   <Form.Group>\n//                     <Form.Label>Phone Number</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"phoneNumber\"\n//                       placeholder=\"Phone Number\"\n//                       value={phoneNumber}\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.phoneNumberError}\n//                     </div>\n//                     <Form.Text\n//                       className=\"text-muted\"\n//                       onChange={this.handleInputChange}\n//                     >\n//                       Please add phone number in the following format 555\n//                       1117777\n//                     </Form.Text>\n//                   </Form.Group>\n//                   <Form.Group>\n//                     <Form.Label>Pet Behavior</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"behavior\"\n//                       placeholder=\"Pet Behavior\"\n//                       value={behavior}\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.behaviorError}\n//                     </div>\n//                   </Form.Group>\n//                 </Col>\n//                 <Col>\n//                   <Form.Group>\n//                     <Form.Label>Fired Client?</Form.Label>\n//                     <Form.Control\n//                       as=\"select\"\n//                       name=\"banned\"\n//                       onChange={this.handleInputBooleanChange}\n//                       autocomplete=\"off\"\n//                     >\n//                       <option value={false}>No</option>\n//                       <option value={true}>Yes</option>\n//                     </Form.Control>\n//                   </Form.Group>\n//                 </Col>\n//               </Row>\n//               <Alert\n//                 show={this.state.show}\n//                 variant={\"success\"}\n//                 onClose={() => this.setState({ show: false })}\n//                 dismissible\n//               >\n//                 Pet has been successfully saved!\n//               </Alert>\n//               <div className=\"buttonbottom\">\n//                 <Button justify-content-end variant=\"primary\" type=\"submit\">\n//                   Create\n//                 </Button>\n//               </div>\n//             </Form>\n//           </div>\n//         </section>\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/andresnew00/Desktop/Projects/Pet-Tracker-React-Springboot/src/main/java/com/company/Pettracker/app/src/components/CreateModal.js"],"names":["React","useState","Form","Button","Row","Col","Alert","axios","CreateModal","props","newClient","setNewClient","petName","clientName","phoneNumber","behavior","banned","errors","setErrors","petNameError","clientNameError","phoneNumberError","behaviorError","validateForm","match","length","handleSubmit","e","preventDefault","formIsValid","post","then","res","console","log","setUpdateList","updateList","setShow","catch","error","response","data","message","handleInputChange","event","name","value","target","prevState","handleInputBooleanChange","toggleCreateModal"],"mappings":"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qFE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,+BAAR;AAA4B,IAAA,OAAO,EAAC,SAApC;AAA8C,IAAA,IAAI,EAAC,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CArFF,CADF,CAbF,CADF,CADF;AA+GD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Row, Col, Alert } from \"react-bootstrap\";\n\nimport axios from \"axios\";\n\nexport default function CreateModal(props) {\n  const [newClient, setNewClient] = useState({\n    petName: \"\",\n    clientName: \"\",\n    phoneNumber: \"\",\n    behavior: \"\",\n    banned: false,\n  });\n\n  const [errors, setErrors] = useState({\n    petNameError: \"\",\n    clientNameError: \"\",\n    phoneNumberError: \"\",\n    behaviorError: \"\",\n  });\n\n  const validateForm = () => {\n    let petNameError = \"\";\n    let clientNameError = \"\";\n    let phoneNumberError = \"\";\n    let behaviorError = \"\";\n\n    if (!newClient.petName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      petNameError = \"Pet name should only contain valid characters.\";\n    }\n\n    if (newClient.petName.length > 15) {\n      petNameError = \"Pet's name can not be longer than 15 characters\";\n    }\n\n    if (newClient.clientName.length < 2 || newClient.clientName.length > 30) {\n      clientNameError =\n        \"Name should be more than 2 characters and less than 30\";\n    }\n\n    if (!newClient.clientName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      clientNameError = \"Client name should only include letters\";\n    }\n\n    if (!newClient.phoneNumber.match(/^((\\d{3})\\s)?(\\d{7})$/)) {\n      phoneNumberError =\n        \"format should be area code, space then 7 digits ex. 000 0000000\";\n    }\n\n    if (!newClient.behavior.match(/^[a-zA-Z]+$/)) {\n      behaviorError = \"this field should only contain letters and no spaces\";\n    }\n\n    if (petNameError || clientNameError || phoneNumberError || behaviorError) {\n      setErrors({\n        petNameError: petNameError,\n        clientNameError: clientNameError,\n        phoneNumberError: phoneNumberError,\n        behaviorError: behaviorError,\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const formIsValid = validateForm();\n\n    if (formIsValid) {\n      axios\n        .post(\"http://localhost:8080/pet/newPet\", newClient)\n        .then((res) => {\n          console.log(res);\n          //update list after adding new element\n          props.setUpdateList(!props.updateList);\n          props.setShow\n        })\n        .catch((error) => {\n          console.log(error.response.data.message);\n        });\n\n      //clear form\n      // this.setState(initialState);\n\n      //update client list\n      // props.getAllClients();\n\n      //alert popup\n      // this.setState({ show: true });\n    }\n  };\n\n  const handleInputChange = (event) => {\n    event.preventDefault();\n\n    const { name, value } = event.target;\n\n    setNewClient((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n    console.log(newClient);\n  };\n\n  const handleInputBooleanChange = (event) => {\n    event.preventDefault();\n\n    const { name, value } = event.target;\n\n    setNewClient({\n      [name]: value === \"true\",\n    });\n  };\n\n  return (\n    <div className=\"CreateModal\">\n      <section>\n        <div className=\"topBar\">\n          <Row>\n            <Col>\n              <h2>Create New Patient</h2>\n            </Col>\n            <Col className=\"closeButton\">\n              <Button onClick={props.toggleCreateModal}>\n                <i className=\"fa fa-close fa-lg\"></i>\n              </Button>\n            </Col>\n          </Row>\n        </div>\n        <div className=\"modalContent\">\n          <Form noValidate className=\"form\" onSubmit={handleSubmit}>\n            <Row>\n              <Col>\n                <Form.Group>\n                  <Form.Label>Pet Name</Form.Label>\n                  <Form.Control\n                    required\n                    name=\"petName\"\n                    value={newClient.petName}\n                    placeholder=\"Pet Name\"\n                    onChange={handleInputChange}\n                    autoComplete=\"off\"\n                  />\n                  <div className=\"error-message\">{errors.petNameError}</div>\n                </Form.Group>\n\n                <Form.Group>\n                  <Form.Label>Client Name</Form.Label>\n                  <Form.Control\n                    required\n                    name=\"clientName\"\n                    placeholder=\"Client Name\"\n                    value={newClient.clientName}\n                    onChange={handleInputChange}\n                    autocomplete=\"off\"\n                  />\n                  <div className=\"error-message\">{errors.clientNameError}</div>\n                </Form.Group>\n\n                <Form.Group>\n                  <Form.Label>Phone Number</Form.Label>\n                  <Form.Control\n                    required\n                    name=\"phoneNumber\"\n                    placeholder=\"Phone Number\"\n                    value={newClient.phoneNumber}\n                    onChange={handleInputChange}\n                    autocomplete=\"off\"\n                  />\n                  <div className=\"error-message\">{errors.phoneNumberError}</div>\n                  <Form.Text\n                    className=\"text-muted\"\n                    onChange={handleInputChange}\n                  >\n                    Please add phone number in the following format 555 1117777\n                  </Form.Text>\n                </Form.Group>\n\n                <Form.Group>\n                  <Form.Label>Pet Behavior</Form.Label>\n                  <Form.Control\n                    required\n                    name=\"behavior\"\n                    placeholder=\"Pet Behavior\"\n                    value={newClient.behavior}\n                    onChange={handleInputChange}\n                    autocomplete=\"off\"\n                  />\n                  <div className=\"error-message\">{errors.behaviorError}</div>\n                </Form.Group>\n              </Col>\n\n              <Col>\n                <Form.Group>\n                  <Form.Label>Fired Client?</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    name=\"banned\"\n                    onChange={handleInputBooleanChange}\n                    autocomplete=\"off\"\n                  >\n                    <option value={false}>No</option>\n                    <option value={true}>Yes</option>\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n            </Row>\n            {/* <Alert\n              show={this.state.show}\n              variant={\"success\"}\n              onClose={() => this.setState({ show: false })}\n              dismissible\n            >\n              Pet has been successfully saved!\n            </Alert> */}\n            <div className=\"buttonbottom\">\n              <Button justify-content-end variant=\"primary\" type=\"submit\">\n                Create\n              </Button>\n            </div>\n          </Form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\n// const initialState = {\n//   petName: \"\",\n//   clientName: \"\",\n//   phoneNumber: \"\",\n//   behavior: \"\",\n//   banned: false,\n//   petNameError: \"\",\n//   clientNameError: \"\",\n//   phoneNumberError: \"\",\n//   behaviorError: \"\",\n//   show: false,\n// };\n\n// export default class CreateModal extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = initialState;\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.handleInputChange = this.handleInputChange.bind(this);\n//   }\n\n//   validateForm = () => {\n//     let petNameError = \"\";\n//     let clientNameError = \"\";\n//     let phoneNumberError = \"\";\n//     let behaviorError = \"\";\n\n//     if (!this.state.petName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n//       petNameError = \"Pet name should only contain valid characters.\";\n//     }\n\n//     if (this.state.petName.length > 15) {\n//       petNameError = \"Pet's name can not be longer than 15 characters\";\n//     }\n\n//     if (this.state.clientName.length < 2 || this.state.clientName.length > 30) {\n//       clientNameError =\n//         \"Name should be more than 2 characters and less than 30\";\n//     }\n\n//     if (!this.state.clientName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n//       clientNameError = \"Client name should only include letters\";\n//     }\n\n//     if (!this.state.phoneNumber.match(/^((\\d{3})\\s)?(\\d{7})$/)) {\n//       phoneNumberError =\n//         \"format should be area code, space then 7 digits ex. 000 0000000\";\n//     }\n\n//     if (!this.state.behavior.match(/^[a-zA-Z]+$/)) {\n//       behaviorError = \"this field should only contain letters and no spaces\";\n//     }\n\n//     if (petNameError || clientNameError || phoneNumberError || behaviorError) {\n//       this.setState({\n//         petNameError,\n//         clientNameError,\n//         phoneNumberError,\n//         behaviorError,\n//       });\n//       return false;\n//     }\n\n//     return true;\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     const isValid = this.validateForm();\n\n//     if (isValid) {\n//       const clientInfo = {\n//         petName: this.state.petName,\n//         clientName: this.state.clientName,\n//         phoneNumber: this.state.phoneNumber,\n//         behavior: this.state.behavior,\n//         banned: this.state.banned,\n//       };\n\n//       console.log(clientInfo);\n\n//       axios\n//         .post(\"http://localhost:8080/pet/newPet\", clientInfo)\n//         .then((res) => console.log(res))\n//         .catch((error) => {\n//           console.log(error.response.data.message);\n//         });\n\n//       //clear form\n//       this.setState(initialState);\n\n//       //update client list\n//       this.props.getAllClients();\n\n//       //alert popup\n//       this.setState({ show: true });\n//     }\n//   };\n\n//   handleInputChange = (event) => {\n//     event.preventDefault();\n\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//     });\n//   };\n\n//   handleInputBooleanChange = (event) => {\n//     event.preventDefault();\n\n//     this.setState({\n//       [event.target.name]: event.target.value === \"true\",\n//     });\n//   };\n\n//   render() {\n//     const {\n//       petName,\n//       clientName,\n//       phoneNumber,\n//       behavior,\n//       validated,\n//     } = this.state;\n//     return (\n//       <div className=\"CreateModal\">\n//         <section>\n//           <div className=\"topBar\">\n//             <Row>\n//               <Col>\n//                 <h2>Create New Patient</h2>\n//               </Col>\n//               <Col className=\"closeButton\">\n//                 <Button onClick={this.props.toggleCreateModal}>\n//                   <i className=\"fa fa-close fa-lg\"></i>\n//                 </Button>\n//               </Col>\n//             </Row>\n//           </div>\n//           <div className=\"modalContent\">\n//             <Form\n//               noValidate\n//               validated={validated}\n//               className=\"form\"\n//               onSubmit={this.handleSubmit}\n//             >\n//               <Row>\n//                 <Col>\n//                   <Form.Group>\n//                     <Form.Label>Pet Name</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"petName\"\n//                       value={petName}\n//                       placeholder=\"Pet Name\"\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.petNameError}\n//                     </div>\n//                   </Form.Group>\n\n//                   <Form.Group>\n//                     <Form.Label>Client Name</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"clientName\"\n//                       placeholder=\"Client Name\"\n//                       value={clientName}\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.clientNameError}\n//                     </div>\n//                   </Form.Group>\n\n//                   <Form.Group>\n//                     <Form.Label>Phone Number</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"phoneNumber\"\n//                       placeholder=\"Phone Number\"\n//                       value={phoneNumber}\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.phoneNumberError}\n//                     </div>\n//                     <Form.Text\n//                       className=\"text-muted\"\n//                       onChange={this.handleInputChange}\n//                     >\n//                       Please add phone number in the following format 555\n//                       1117777\n//                     </Form.Text>\n//                   </Form.Group>\n\n//                   <Form.Group>\n//                     <Form.Label>Pet Behavior</Form.Label>\n//                     <Form.Control\n//                       required\n//                       name=\"behavior\"\n//                       placeholder=\"Pet Behavior\"\n//                       value={behavior}\n//                       onChange={this.handleInputChange}\n//                       autocomplete=\"off\"\n//                     />\n//                     <div className=\"error-message\">\n//                       {this.state.behaviorError}\n//                     </div>\n//                   </Form.Group>\n//                 </Col>\n\n//                 <Col>\n//                   <Form.Group>\n//                     <Form.Label>Fired Client?</Form.Label>\n//                     <Form.Control\n//                       as=\"select\"\n//                       name=\"banned\"\n//                       onChange={this.handleInputBooleanChange}\n//                       autocomplete=\"off\"\n//                     >\n//                       <option value={false}>No</option>\n//                       <option value={true}>Yes</option>\n//                     </Form.Control>\n//                   </Form.Group>\n//                 </Col>\n//               </Row>\n//               <Alert\n//                 show={this.state.show}\n//                 variant={\"success\"}\n//                 onClose={() => this.setState({ show: false })}\n//                 dismissible\n//               >\n//                 Pet has been successfully saved!\n//               </Alert>\n//               <div className=\"buttonbottom\">\n//                 <Button justify-content-end variant=\"primary\" type=\"submit\">\n//                   Create\n//                 </Button>\n//               </div>\n//             </Form>\n//           </div>\n//         </section>\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}