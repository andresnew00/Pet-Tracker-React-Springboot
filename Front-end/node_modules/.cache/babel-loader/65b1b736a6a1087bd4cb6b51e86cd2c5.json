{"ast":null,"code":"var _jsxFileName = \"/Users/andresnew00/Desktop/Projects/Pet-Tracker-React-Springboot/src/main/java/com/company/Pettracker/app/src/App.js\";\nimport React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport OrderNCreateBar from \"./components/OrderNCreateBar\";\nimport TableOfClients from \"./components/TableOfClients\";\nimport CreateModal from \"./components/CreateModal\";\nimport CheckInModal from \"./components/CheckInModal\";\nimport DeleteModal from \"./components/DeleteModal\";\nimport EditModal from \"./components/EditModal\";\nimport Toast from \"react-bootstrap/Toast\";\nimport { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport \"./App.css\";\nexport default function App() {\n  const [clientData, setClientData] = useState([]);\n  const [selectedClient, setSelectedClient] = useState({\n    petId: \"\",\n    petName: \"\",\n    clientName: \"\",\n    phoneNumber: \"\",\n    lastTime: \"\",\n    behavior: \"\",\n    banned: false\n  });\n  const [createIsOpen, setCreateIsOpen] = useState(false);\n  const [checkInIsOpen, setCheckInIsOpen] = useState(false);\n  const [deleteIsOpen, setDeleteIsOpen] = useState(false);\n  const [editIsOpen, setEditIsOpen] = useState(false);\n  const [errors, setErrors] = useState({\n    petNameError: \"\",\n    clientNameError: \"\",\n    phoneNumberError: \"\",\n    behaviorError: \"\"\n  });\n  const [showToast, setShowToast] = useState(false);\n  const [toastContent, setToastContent] = useState({\n    toastTitle: \"\",\n    toastContent: \"\",\n    toastColor: {\n      color: \"blue\",\n      backgroundImage: \"url(\" + imgUrl + \")\"\n    }\n  });\n  const [updateList, setUpdateList] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [orderOfItems, setOrderOfItems] = useState(\"Date Older - Newer\");\n  useEffect(() => {\n    Axios.get(\"http://localhost:8080/pet/getAll\").then(response => {\n      setClientData(response.data);\n      console.log(\"useEffect ran\");\n    });\n  }, [updateList]); // working!\n\n  const handleOpenCreateModal = () => {\n    setCreateIsOpen(!createIsOpen);\n  };\n\n  const handleCheckInModal = () => {\n    setCheckInIsOpen(!checkInIsOpen);\n  };\n\n  const handleDeleteModal = () => {\n    setDeleteIsOpen(!deleteIsOpen);\n  };\n\n  const handleEditModal = () => {\n    setEditIsOpen(!editIsOpen);\n  }; // this works!\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const toggleShowToast = () => setShowToast(!showToast);\n\n  const validateForm = client => {\n    let petNameError = \"\";\n    let clientNameError = \"\";\n    let phoneNumberError = \"\";\n    let behaviorError = \"\";\n\n    if (!client.petName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      petNameError = \"Pet name should only contain valid characters.\";\n    }\n\n    if (client.petName.length > 15) {\n      petNameError = \"Pet's name can not be longer than 15 characters\";\n    }\n\n    if (client.clientName.length < 2 || client.clientName.length > 30) {\n      clientNameError = \"Name should be more than 2 characters and less than 30\";\n    }\n\n    if (!client.clientName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      clientNameError = \"Client name should only include letters\";\n    }\n\n    if (!client.phoneNumber.match(/^((\\d{3})\\s)?(\\d{7})$/)) {\n      phoneNumberError = \"format should be area code, space then 7 digits ex. 000 0000000\";\n    }\n\n    if (!client.behavior.match(/^[a-zA-Z]+$/)) {\n      behaviorError = \"this field should only contain letters and no spaces\";\n    }\n\n    if (petNameError || clientNameError || phoneNumberError || behaviorError) {\n      setErrors({\n        petNameError: petNameError,\n        clientNameError: clientNameError,\n        phoneNumberError: phoneNumberError,\n        behaviorError: behaviorError\n      });\n      return false;\n    }\n\n    return true;\n  }; // working!\n\n\n  const updateListOfClients = () => {\n    switch (orderOfItems) {\n      case \"Alphabetical\":\n        setClientData(clientData.sort((a, b) => (a.petName > b.petName) * 2 - 1));\n        break;\n\n      case \"Date Newer - Older\":\n        setClientData(clientData.sort((a, b) => (a.lastTime < b.lastTime) * 2 - 1));\n        break;\n\n      default:\n        setClientData(clientData.sort((a, b) => (a.lastTime > b.lastTime) * 2 - 1));\n    }\n  };\n\n  const updateSelectedClient = (clientId, petName, clientName, phoneNumber, lastTime, behavior, banned) => {\n    setSelectedClient({\n      petId: clientId,\n      petName: petName,\n      clientName: clientName,\n      phoneNumber: phoneNumber,\n      lastTime: lastTime,\n      behavior: behavior,\n      banned: banned\n    });\n  };\n\n  const changeOrder = e => {\n    setOrderOfItems(e.target.text);\n    updateListOfClients();\n  };\n\n  const deleteClient = clientId => {\n    const url = \"http://localhost:8080/pet/deletePet/\" + clientId; // state, before delete anything\n\n    const currentClients = clientData; // Remove deleted item from state.\n\n    setClientData(currentClients.filter(clients => clients.petId !== clientId));\n    Axios.delete(url).then(response => {\n      if (response.status === \"error\") {\n        // Oops, something went wrong. Let's get that deleted Id back.\n        setClientData(currentClients); // Show Error message here.\n      } else {\n        // Delete successfully, do nothing.\n        // Because we already remove the deleted id from state.\n        setUpdateList(!updateList); // Show success message here.\n        //TODO CREATE A Message on screen to show successful delete\n\n        console.log(\"Pet is bye bye\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    search: search,\n    updateSearch: updateSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(OrderNCreateBar, {\n    changeOrder: changeOrder,\n    order: orderOfItems,\n    toggleCreateModal: handleOpenCreateModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TableOfClients, {\n    order: orderOfItems,\n    search: search,\n    clientData: clientData,\n    updateSelectedClient: updateSelectedClient,\n    selectedClient: selectedClient,\n    toggleCheckIn: handleCheckInModal,\n    toggleDelete: handleDeleteModal,\n    toggleEdit: handleEditModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Toast, {\n    show: showToast,\n    onClose: toggleShowToast,\n    delay: 10000,\n    autohide: true,\n    animation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Toast.Header, {\n    style: toastContent.to,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"holder.js/20x20?text=%20\",\n    className: \"rounded me-2\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    className: \"me-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, toastContent.toastTitle), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, \"now\")), /*#__PURE__*/React.createElement(Toast.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, toastContent.toastContent)), createIsOpen ? /*#__PURE__*/React.createElement(CreateModal, {\n    toggleCreateModal: handleOpenCreateModal,\n    setUpdateList: setUpdateList,\n    updateList: updateList,\n    setToastContent: setToastContent,\n    toggleShowToast: toggleShowToast,\n    validateForm: validateForm,\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }) : null, editIsOpen ? /*#__PURE__*/React.createElement(EditModal, {\n    toggleEditModal: handleEditModal,\n    setSelectedClient: setSelectedClient,\n    selectedClient: selectedClient,\n    setUpdateList: setUpdateList,\n    updateList: updateList,\n    setToastContent: setToastContent,\n    toggleShowToast: toggleShowToast,\n    validateForm: validateForm,\n    errors: errors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }) : null, /*#__PURE__*/React.createElement(CheckInModal, {\n    showModal: checkInIsOpen,\n    selectedClient: selectedClient,\n    onHide: handleCheckInModal,\n    setUpdateList: setUpdateList,\n    updateList: updateList,\n    setToastContent: setToastContent,\n    toggleShowToast: toggleShowToast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DeleteModal, {\n    showModal: deleteIsOpen,\n    selectedClient: selectedClient,\n    onHide: handleDeleteModal,\n    deleteClient: deleteClient,\n    setUpdateList: setUpdateList,\n    updateList: updateList,\n    setToastContent: setToastContent,\n    toggleShowToast: toggleShowToast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }\n  }));\n} // class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleOpenCreateModal = this.handleOpenCreateModal.bind(this);\n//     this.handleOpenEditModal = this.handleOpenEditModal.bind(this);\n//     this.changeOrder = this.changeOrder.bind(this);\n//     this.getClient = this.getClient.bind(this);\n//     this.state = {\n//       clientData: [\n//         {\n//           petId: \"\",\n//           clientName: \"\",\n//           petName: \"\",\n//           phoneNumber: \"\",\n//           lastTime: \"\",\n//           behavior: \"\",\n//           banned: \"\",\n//         },\n//       ],\n//       createIsOpen: false,\n//       checkInIsOpen: false,\n//       deleteIsOpen: false,\n//       editIsOpen: false,\n//       search: \"\",\n//       orderOfitems: \"Date Older - Newer\",\n//     };\n//   }\n//   componentDidMount() {\n//     this.getAllClients();\n//   }\n//   getAllClients = () => {\n//     Axios.get(\"http://localhost:8080/pet/getAll\").then((response) =>\n//       this.setState({ clientData: response.data })\n//     );\n//   };\n//   handleOpenCreateModal() {\n//     this.setState({\n//       createIsOpen: !this.state.createIsOpen,\n//     });\n//   }\n//   handleOpenEditModal() {\n//     this.setState({\n//       editIsOpen: !this.state.editIsOpen,\n//     });\n//   }\n//   handleOpenCheckInModal = () => {\n//     this.setState({\n//       checkInIsOpen: !this.state.checkInIsOpen,\n//     });\n//   };\n//   handleOpenDeleteModal = () => {\n//     this.setState({\n//       deleteIsOpen: !this.state.deleteIsOpen,\n//     });\n//   };\n//   getClient = (\n//     clientId,\n//     clientName,\n//     petName,\n//     phoneNumber,\n//     lastTime,\n//     behavior,\n//     banned\n//   ) => {\n//     this.setState({\n//       selectedClientId: clientId,\n//       selectedClientName: clientName,\n//       selectedPetName: petName,\n//       selectedPhoneNumber: phoneNumber,\n//       selectedLastTime: lastTime,\n//       selectedBehavior: behavior,\n//       selectedBanned: banned,\n//     });\n//   };\n//   updateSearch = (event) => {\n//     this.setState({\n//       search: event.target.value,\n//     });\n//   };\n//   changeOrder = (event) => {\n//     this.setState(\n//       {\n//         orderOfitems: event.target.text,\n//       },\n//       this.updateListOfClients\n//     );\n//   };\n//   deleteClient = (clientId) => {\n//     const url = \"http://localhost:8080/pet/deletePet/\" + clientId;\n//     // state, before delete anything\n//     const currentClients = this.state.clientData;\n//     // Remove deleted item from state.\n//     this.setState({\n//       clientData: currentClients.filter(clients => clients.petId !== clientId),\n//     });\n//     axios\n//       .delete(url)\n//       .then(response => {\n//         if (response.status === 'error') {\n//           // Oops, something went wrong. Let's get that deleted Id back.\n//           this.setState({\n//             clientData: currentClients,\n//           });\n//           // Show Error message here.\n//         } else {\n//           // Delete successfully, do nothing.\n//           // Because we already remove the deleted id from state.\n//           // Show success message here.\n//           //TODO CREATE A Message on screen to show successful delete\n//           console.log(\"Pet is bye bye\")\n//         }\n//       });\n//   };\n//   updateListOfClients = () => {\n//     switch (this.state.orderOfitems) {\n//       case \"Alphabetical\":\n//         this.setState({\n//           clientData: this.state.clientData.sort(\n//             (a, b) => (a.petName > b.petName) * 2 - 1\n//           ),\n//         });\n//         break;\n//       case \"Date Newer - Older\":\n//         this.setState({\n//           clientData: this.state.clientData.sort(\n//             (a, b) => (a.lastTime < b.lastTime) * 2 - 1\n//           ),\n//         });\n//         break;\n//       default:\n//         this.setState({\n//           clientData: this.state.clientData.sort(\n//             (a, b) => (a.lastTime > b.lastTime) * 2 - 1\n//           ),\n//         });\n//     }\n//   };\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <NavBar search={this.state.search} updateSearch={this.updateSearch} />\n//         <OrderNCreateBar\n//           changeOrder={this.changeOrder}\n//           order={this.state.orderOfitems}\n//           toggleCreateModal={this.handleOpenCreateModal}\n//         />\n//         <TableOfClients\n//           order={this.state.orderOfitems}\n//           search={this.state.search}\n//           clientData={this.state.clientData}\n//           selectClient={this.getClient}\n//           toggleCheckIn={this.handleOpenCheckInModal}\n//           toggleDelete={this.handleOpenDeleteModal}\n//           toggleEdit={this.handleOpenEditModal}\n//         />\n//         {this.state.createIsOpen ? (\n//           <CreateModal\n//             toggleCreateModal={this.handleOpenCreateModal}\n//             getAllClients={this.getAllClients}\n//           />\n//         ) : null}\n//         {this.state.editIsOpen ? (\n//           <EditModal\n//             toggleEditModal={this.handleOpenEditModal}\n//             clientId={this.state.selectedClientId}\n//             petName={this.state.selectedPetName}\n//             clientName={this.state.selectedClientName}\n//             phoneNumber={this.state.selectedPhoneNumber}\n//             behavior={this.state.selectedBehavior}\n//             banned={this.state.selectedBanned}\n//           />\n//         ) : null}\n//         <CheckInModal\n//           showModal={this.state.checkInIsOpen}\n//           clientId={this.state.selectedClientId}\n//           clientName={this.state.selectedClientName}\n//           clientLastTime={this.state.selectedLastTime}\n//           petName={this.state.selectedPetName}\n//           clientPhoneNumber={this.state.selectedPhoneNumber}\n//           onHide={this.handleOpenCheckInModal}\n//           getAllClients={this.getAllClients}\n//         />\n//         <DeleteModal\n//           showModal={this.state.deleteIsOpen}\n//           clientId={this.state.selectedClientId}\n//           clientName={this.state.selectedClientName}\n//           petName={this.state.selectedPetName}\n//           clientPhoneNumber={this.state.selectedPhoneNumber}\n//           onHide={this.handleOpenDeleteModal}\n//           deleteClient={this.deleteClient}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/andresnew00/Desktop/Projects/Pet-Tracker-React-Springboot/src/main/java/com/company/Pettracker/app/src/App.js"],"names":["React","NavBar","OrderNCreateBar","TableOfClients","CreateModal","CheckInModal","DeleteModal","EditModal","Toast","useState","useEffect","Axios","App","clientData","setClientData","selectedClient","setSelectedClient","petId","petName","clientName","phoneNumber","lastTime","behavior","banned","createIsOpen","setCreateIsOpen","checkInIsOpen","setCheckInIsOpen","deleteIsOpen","setDeleteIsOpen","editIsOpen","setEditIsOpen","errors","setErrors","petNameError","clientNameError","phoneNumberError","behaviorError","showToast","setShowToast","toastContent","setToastContent","toastTitle","toastColor","color","backgroundImage","imgUrl","updateList","setUpdateList","search","setSearch","orderOfItems","setOrderOfItems","get","then","response","data","console","log","handleOpenCreateModal","handleCheckInModal","handleDeleteModal","handleEditModal","updateSearch","e","target","value","toggleShowToast","validateForm","client","match","length","updateListOfClients","sort","a","b","updateSelectedClient","clientId","changeOrder","text","deleteClient","url","currentClients","filter","clients","delete","status","to"],"mappings":"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AAGE,IAAA,MAAM,EAAE8C,iBAHV;AAIE,IAAA,YAAY,EAAEmB,YAJhB;AAKE,IAAA,aAAa,EAAEhC,aALjB;AAME,IAAA,UAAU,EAAED,UANd;AAOE,IAAA,eAAe,EAAEN,eAPnB;AAQE,IAAA,eAAe,EAAE0B,eARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlEF,CADF;AA+ED,C,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport OrderNCreateBar from \"./components/OrderNCreateBar\";\nimport TableOfClients from \"./components/TableOfClients\";\nimport CreateModal from \"./components/CreateModal\";\nimport CheckInModal from \"./components/CheckInModal\";\nimport DeleteModal from \"./components/DeleteModal\";\nimport EditModal from \"./components/EditModal\";\nimport Toast from \"react-bootstrap/Toast\";\n\nimport { useState, useEffect } from \"react\";\n\nimport Axios from \"axios\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [clientData, setClientData] = useState([]);\n  const [selectedClient, setSelectedClient] = useState({\n    petId: \"\",\n    petName: \"\",\n    clientName: \"\",\n    phoneNumber: \"\",\n    lastTime: \"\",\n    behavior: \"\",\n    banned: false,\n  });\n\n  const [createIsOpen, setCreateIsOpen] = useState(false);\n  const [checkInIsOpen, setCheckInIsOpen] = useState(false);\n  const [deleteIsOpen, setDeleteIsOpen] = useState(false);\n  const [editIsOpen, setEditIsOpen] = useState(false);\n\n  const [errors, setErrors] = useState({\n    petNameError: \"\",\n    clientNameError: \"\",\n    phoneNumberError: \"\",\n    behaviorError: \"\",\n  });\n\n  const [showToast, setShowToast] = useState(false);\n  const [toastContent, setToastContent] = useState({\n    toastTitle: \"\",\n    toastContent: \"\",\n    toastColor: {\n      color: \"blue\",\n      backgroundImage: \"url(\" + imgUrl + \")\",\n    },\n  });\n\n  const [updateList, setUpdateList] = useState(false);\n\n  const [search, setSearch] = useState(\"\");\n  const [orderOfItems, setOrderOfItems] = useState(\"Date Older - Newer\");\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:8080/pet/getAll\").then((response) => {\n      setClientData(response.data);\n      console.log(\"useEffect ran\");\n    });\n  }, [updateList]);\n\n  // working!\n  const handleOpenCreateModal = () => {\n    setCreateIsOpen(!createIsOpen);\n  };\n\n  const handleCheckInModal = () => {\n    setCheckInIsOpen(!checkInIsOpen);\n  };\n\n  const handleDeleteModal = () => {\n    setDeleteIsOpen(!deleteIsOpen);\n  };\n\n  const handleEditModal = () => {\n    setEditIsOpen(!editIsOpen);\n  };\n\n  // this works!\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const toggleShowToast = () => setShowToast(!showToast);\n\n  const validateForm = (client) => {\n    let petNameError = \"\";\n    let clientNameError = \"\";\n    let phoneNumberError = \"\";\n    let behaviorError = \"\";\n\n    if (!client.petName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      petNameError = \"Pet name should only contain valid characters.\";\n    }\n\n    if (client.petName.length > 15) {\n      petNameError = \"Pet's name can not be longer than 15 characters\";\n    }\n\n    if (client.clientName.length < 2 || client.clientName.length > 30) {\n      clientNameError =\n        \"Name should be more than 2 characters and less than 30\";\n    }\n\n    if (!client.clientName.match(/^([A-Za-z]+[,.]?[ ]?|[a-z]+['-]?)+$/)) {\n      clientNameError = \"Client name should only include letters\";\n    }\n\n    if (!client.phoneNumber.match(/^((\\d{3})\\s)?(\\d{7})$/)) {\n      phoneNumberError =\n        \"format should be area code, space then 7 digits ex. 000 0000000\";\n    }\n\n    if (!client.behavior.match(/^[a-zA-Z]+$/)) {\n      behaviorError = \"this field should only contain letters and no spaces\";\n    }\n\n    if (petNameError || clientNameError || phoneNumberError || behaviorError) {\n      setErrors({\n        petNameError: petNameError,\n        clientNameError: clientNameError,\n        phoneNumberError: phoneNumberError,\n        behaviorError: behaviorError,\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  // working!\n  const updateListOfClients = () => {\n    switch (orderOfItems) {\n      case \"Alphabetical\":\n        setClientData(\n          clientData.sort((a, b) => (a.petName > b.petName) * 2 - 1)\n        );\n        break;\n      case \"Date Newer - Older\":\n        setClientData(\n          clientData.sort((a, b) => (a.lastTime < b.lastTime) * 2 - 1)\n        );\n        break;\n      default:\n        setClientData(\n          clientData.sort((a, b) => (a.lastTime > b.lastTime) * 2 - 1)\n        );\n    }\n  };\n\n  const updateSelectedClient = (\n    clientId,\n    petName,\n    clientName,\n    phoneNumber,\n    lastTime,\n    behavior,\n    banned\n  ) => {\n    setSelectedClient({\n      petId: clientId,\n      petName: petName,\n      clientName: clientName,\n      phoneNumber: phoneNumber,\n      lastTime: lastTime,\n      behavior: behavior,\n      banned: banned,\n    });\n  };\n\n  const changeOrder = (e) => {\n    setOrderOfItems(e.target.text);\n    updateListOfClients();\n  };\n\n  const deleteClient = (clientId) => {\n    const url = \"http://localhost:8080/pet/deletePet/\" + clientId;\n\n    // state, before delete anything\n    const currentClients = clientData;\n\n    // Remove deleted item from state.\n    setClientData(\n      currentClients.filter((clients) => clients.petId !== clientId)\n    );\n\n    Axios.delete(url).then((response) => {\n      if (response.status === \"error\") {\n        // Oops, something went wrong. Let's get that deleted Id back.\n        setClientData(currentClients);\n        // Show Error message here.\n      } else {\n        // Delete successfully, do nothing.\n        // Because we already remove the deleted id from state.\n        setUpdateList(!updateList);\n        // Show success message here.\n        //TODO CREATE A Message on screen to show successful delete\n        console.log(\"Pet is bye bye\");\n      }\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <NavBar search={search} updateSearch={updateSearch} />\n      <OrderNCreateBar\n        changeOrder={changeOrder}\n        order={orderOfItems}\n        toggleCreateModal={handleOpenCreateModal}\n      />\n      <TableOfClients\n        order={orderOfItems}\n        search={search}\n        clientData={clientData}\n        updateSelectedClient={updateSelectedClient}\n        selectedClient={selectedClient}\n        toggleCheckIn={handleCheckInModal}\n        toggleDelete={handleDeleteModal}\n        toggleEdit={handleEditModal}\n      />\n      <Toast\n        show={showToast}\n        onClose={toggleShowToast}\n        delay={10000}\n        autohide\n        animation\n      >\n        <Toast.Header\n          style={toastContent.to}\n        >\n          <img src=\"holder.js/20x20?text=%20\" className=\"rounded me-2\" alt=\"\" />\n          <strong className=\"me-auto\">{toastContent.toastTitle}</strong>\n          <small>now</small>\n        </Toast.Header>\n        <Toast.Body>{toastContent.toastContent}</Toast.Body>\n      </Toast>\n      {createIsOpen ? (\n        <CreateModal\n          toggleCreateModal={handleOpenCreateModal}\n          setUpdateList={setUpdateList}\n          updateList={updateList}\n          setToastContent={setToastContent}\n          toggleShowToast={toggleShowToast}\n          validateForm={validateForm}\n          errors={errors}\n        />\n      ) : null}\n      {editIsOpen ? (\n        <EditModal\n          toggleEditModal={handleEditModal}\n          setSelectedClient={setSelectedClient}\n          selectedClient={selectedClient}\n          setUpdateList={setUpdateList}\n          updateList={updateList}\n          setToastContent={setToastContent}\n          toggleShowToast={toggleShowToast}\n          validateForm={validateForm}\n          errors={errors}\n        />\n      ) : null}\n      <CheckInModal\n        showModal={checkInIsOpen}\n        selectedClient={selectedClient}\n        onHide={handleCheckInModal}\n        setUpdateList={setUpdateList}\n        updateList={updateList}\n        setToastContent={setToastContent}\n        toggleShowToast={toggleShowToast}\n      />\n      <DeleteModal\n        showModal={deleteIsOpen}\n        selectedClient={selectedClient}\n        onHide={handleDeleteModal}\n        deleteClient={deleteClient}\n        setUpdateList={setUpdateList}\n        updateList={updateList}\n        setToastContent={setToastContent}\n        toggleShowToast={toggleShowToast}\n      />\n    </div>\n  );\n}\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.handleOpenCreateModal = this.handleOpenCreateModal.bind(this);\n//     this.handleOpenEditModal = this.handleOpenEditModal.bind(this);\n//     this.changeOrder = this.changeOrder.bind(this);\n\n//     this.getClient = this.getClient.bind(this);\n\n//     this.state = {\n//       clientData: [\n//         {\n//           petId: \"\",\n//           clientName: \"\",\n//           petName: \"\",\n//           phoneNumber: \"\",\n//           lastTime: \"\",\n//           behavior: \"\",\n//           banned: \"\",\n//         },\n//       ],\n//       createIsOpen: false,\n//       checkInIsOpen: false,\n//       deleteIsOpen: false,\n//       editIsOpen: false,\n//       search: \"\",\n//       orderOfitems: \"Date Older - Newer\",\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.getAllClients();\n//   }\n\n//   getAllClients = () => {\n//     Axios.get(\"http://localhost:8080/pet/getAll\").then((response) =>\n//       this.setState({ clientData: response.data })\n//     );\n//   };\n\n//   handleOpenCreateModal() {\n//     this.setState({\n//       createIsOpen: !this.state.createIsOpen,\n//     });\n//   }\n\n//   handleOpenEditModal() {\n//     this.setState({\n//       editIsOpen: !this.state.editIsOpen,\n//     });\n//   }\n\n//   handleOpenCheckInModal = () => {\n//     this.setState({\n//       checkInIsOpen: !this.state.checkInIsOpen,\n//     });\n//   };\n\n//   handleOpenDeleteModal = () => {\n//     this.setState({\n//       deleteIsOpen: !this.state.deleteIsOpen,\n//     });\n//   };\n\n//   getClient = (\n//     clientId,\n//     clientName,\n//     petName,\n//     phoneNumber,\n//     lastTime,\n//     behavior,\n//     banned\n//   ) => {\n//     this.setState({\n//       selectedClientId: clientId,\n//       selectedClientName: clientName,\n//       selectedPetName: petName,\n//       selectedPhoneNumber: phoneNumber,\n//       selectedLastTime: lastTime,\n//       selectedBehavior: behavior,\n//       selectedBanned: banned,\n//     });\n//   };\n\n//   updateSearch = (event) => {\n//     this.setState({\n//       search: event.target.value,\n//     });\n//   };\n\n//   changeOrder = (event) => {\n//     this.setState(\n//       {\n//         orderOfitems: event.target.text,\n//       },\n//       this.updateListOfClients\n//     );\n//   };\n\n//   deleteClient = (clientId) => {\n//     const url = \"http://localhost:8080/pet/deletePet/\" + clientId;\n\n//     // state, before delete anything\n//     const currentClients = this.state.clientData;\n\n//     // Remove deleted item from state.\n//     this.setState({\n//       clientData: currentClients.filter(clients => clients.petId !== clientId),\n//     });\n\n//     axios\n//       .delete(url)\n//       .then(response => {\n//         if (response.status === 'error') {\n//           // Oops, something went wrong. Let's get that deleted Id back.\n//           this.setState({\n//             clientData: currentClients,\n//           });\n\n//           // Show Error message here.\n//         } else {\n\n//           // Delete successfully, do nothing.\n//           // Because we already remove the deleted id from state.\n\n//           // Show success message here.\n\n//           //TODO CREATE A Message on screen to show successful delete\n//           console.log(\"Pet is bye bye\")\n\n//         }\n//       });\n//   };\n\n//   updateListOfClients = () => {\n//     switch (this.state.orderOfitems) {\n//       case \"Alphabetical\":\n//         this.setState({\n//           clientData: this.state.clientData.sort(\n//             (a, b) => (a.petName > b.petName) * 2 - 1\n//           ),\n//         });\n//         break;\n//       case \"Date Newer - Older\":\n//         this.setState({\n//           clientData: this.state.clientData.sort(\n//             (a, b) => (a.lastTime < b.lastTime) * 2 - 1\n//           ),\n//         });\n//         break;\n//       default:\n//         this.setState({\n//           clientData: this.state.clientData.sort(\n//             (a, b) => (a.lastTime > b.lastTime) * 2 - 1\n//           ),\n//         });\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <NavBar search={this.state.search} updateSearch={this.updateSearch} />\n//         <OrderNCreateBar\n//           changeOrder={this.changeOrder}\n//           order={this.state.orderOfitems}\n//           toggleCreateModal={this.handleOpenCreateModal}\n//         />\n//         <TableOfClients\n//           order={this.state.orderOfitems}\n//           search={this.state.search}\n//           clientData={this.state.clientData}\n//           selectClient={this.getClient}\n//           toggleCheckIn={this.handleOpenCheckInModal}\n//           toggleDelete={this.handleOpenDeleteModal}\n//           toggleEdit={this.handleOpenEditModal}\n//         />\n//         {this.state.createIsOpen ? (\n//           <CreateModal\n//             toggleCreateModal={this.handleOpenCreateModal}\n//             getAllClients={this.getAllClients}\n//           />\n//         ) : null}\n//         {this.state.editIsOpen ? (\n//           <EditModal\n//             toggleEditModal={this.handleOpenEditModal}\n//             clientId={this.state.selectedClientId}\n//             petName={this.state.selectedPetName}\n//             clientName={this.state.selectedClientName}\n//             phoneNumber={this.state.selectedPhoneNumber}\n//             behavior={this.state.selectedBehavior}\n//             banned={this.state.selectedBanned}\n//           />\n//         ) : null}\n//         <CheckInModal\n//           showModal={this.state.checkInIsOpen}\n//           clientId={this.state.selectedClientId}\n//           clientName={this.state.selectedClientName}\n//           clientLastTime={this.state.selectedLastTime}\n//           petName={this.state.selectedPetName}\n//           clientPhoneNumber={this.state.selectedPhoneNumber}\n//           onHide={this.handleOpenCheckInModal}\n//           getAllClients={this.getAllClients}\n//         />\n//         <DeleteModal\n//           showModal={this.state.deleteIsOpen}\n//           clientId={this.state.selectedClientId}\n//           clientName={this.state.selectedClientName}\n//           petName={this.state.selectedPetName}\n//           clientPhoneNumber={this.state.selectedPhoneNumber}\n//           onHide={this.handleOpenDeleteModal}\n//           deleteClient={this.deleteClient}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}